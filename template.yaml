AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: 'eventportal-backend SAM Template'
Globals:
  Function:
    Timeout: 3
    MemorySize: 128
Resources:
  Apigate:
    Type: AWS::Serverless::Api
    Properties:
      Name: EventportalBackend
      StageName: Prod
      Cors:
        AllowMethods: "'OPTIONS,POST,GET,PUT,DELETE'"
        AllowHeaders: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
        AllowOrigin: "'*'"
      DefinitionBody:
        Fn::Transform:
          Name: AWS::Include
          Parameters:
            Location: .docs/openapi.yml
  ZigLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: ZigLayer
      Description: Zig Layer
      ContentUri: zig/
      CompatibleRuntimes:
        - python3.11
      RetentionPolicy: Retain
  EventportalLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: EventportalLambdaRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Policies:
      - PolicyName: EventportalLambdaPolicy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - dynamodb:PutItem
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            Resource:
            - !Sub 'arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/DynamoDbProposalTable'
            - !Sub 'arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/DynamoDbAccountTable'
            - !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/*'
  EventPortalWorkingTest:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambda/ApiWorkingTest/
      Handler: app.lambda_handler
      Runtime: python3.11
      Architectures:
      - x86_64
      Events:
        WorkingTest:
          Type: Api
          Properties:
            Path: /api_work_test
            Method: get
            RestApiId: !Ref Apigate
    Metadata:
      SamResourceId: EventPortalWorkingTest
  EventportalPostSpeaker:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambda/proposal/AddingProposal/
      Handler: app.lambda_handler
      Runtime: python3.11
      Architectures:
      - x86_64
      Events:
        AddProposal:
          Type: Api
          Properties:
            Path: /adding_proposal
            Method: post
            RestApiId: !Ref Apigate
      Role:
        Fn::GetAtt:
        - EventportalLambdaRole
        - Arn
      Layers:
        - !Ref ZigLayer
    Metadata:
      SamResourceId: EventportalPostSpeaker
  EventportalGetSpeakers:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambda/proposal/GetProposal/
      Handler: app.lambda_handler
      Runtime: python3.11
      Architectures:
      - x86_64
      Events:
        AddProposal:
          Type: Api
          Properties:
            Path: /check_proposal/{id}
            Method: get
            RestApiId: !Ref Apigate
      Role:
        Fn::GetAtt:
        - EventportalLambdaRole
        - Arn
      Layers:
        - !Ref ZigLayer
    Metadata:
      SamResourceId: EventportalGetSpeakers
  EventportalGetAllSpeakers:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambda/proposal/GetAllProposal/
      Handler: app.lambda_handler
      Runtime: python3.11
      Architectures:
      - x86_64
      Events:
        AddProposal:
          Type: Api
          Properties:
            Path: /check_proposal_all
            Method: get
            RestApiId: !Ref Apigate
      Role:
        Fn::GetAtt:
        - EventportalLambdaRole
        - Arn
      Layers:
        - !Ref ZigLayer
    Metadata:
      SamResourceId: EventportalGetSpeakers
  AuthenticationAddUser:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambda/authentication/AddUserInfo/
      Handler: app.lambda_handler
      Runtime: python3.11
      Architectures:
      - x86_64
      Events:
        AddUser:
          Type: Api
          Properties:
            Path: /add_user
            Method: post
            RestApiId: !Ref Apigate
      Role:
        Fn::GetAtt:
        - EventportalLambdaRole
        - Arn
      Layers:
        - !Ref ZigLayer
    Metadata:
      SamResourceId: AuthenticationAddUser
  AuthenticationCheckUser:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambda/authentication/CheckUserInfo/
      Handler: app.lambda_handler
      Runtime: python3.11
      Architectures:
      - x86_64
      Events:
        GetUser:
          Type: Api
          Properties:
            Path: /check_user
            Method: get
            RestApiId: !Ref Apigate
      Role:
        Fn::GetAtt:
        - EventportalLambdaRole
        - Arn
      Layers:
        - !Ref ZigLayer
    Metadata:
      SamResourceId: AuthenticationCheckUser
  AuthenticationUpdateUser:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambda/authentication/UpdateUserInfo/
      Handler: app.lambda_handler
      Runtime: python3.11
      Architectures:
      - x86_64
      Events:
        UpdateUser:
          Type: Api
          Properties:
            Path: /update_user
            Method: post
            RestApiId: !Ref Apigate
      Role:
        Fn::GetAtt:
        - EventportalLambdaRole
        - Arn
      Layers:
        - !Ref ZigLayer
    Metadata:
      SamResourceId: AuthenticationUpdateUser

  DynamoDbProposalTable:
    Type: AWS::Serverless::SimpleTable
    Properties:
      PrimaryKey:
        Name: id
        Type: String
      TableName: "DynamoDbProposalTable"
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1
  DynamoDbAccountTable:
    Type: AWS::Serverless::SimpleTable
    Properties:
      PrimaryKey:
        Name: uid
        Type: String
      TableName: "DynamoDbAccountTable"
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1

Outputs:
  ApiGatewayRestApi:
    Description: API Gateway endpoint URL for Prod stage for EventportalBackend function
    Value:
      Fn::Sub: https://${Apigate}.execute-api.${AWS::Region}.amazonaws.com/Prod/
  EventPortalWorkingTest:
    Description: Lambda Function ARN for check working
    Value:
      Fn::GetAtt:
      - EventPortalWorkingTest
      - Arn
  EventportalPostSpeaker:
    Description: Lambda Function ARN for post proposal
    Value:
      Fn::GetAtt:
      - EventportalPostSpeaker
      - Arn
  EventportalGetSpeakers:
    Description: Lambda Function ARN for get proposal
    Value:
      Fn::GetAtt:
      - EventportalGetSpeakers
      - Arn
  EventportalLambdaIamRole:
    Description: Implicit IAM Role created for post proposal function
    Value:
      Fn::GetAtt:
      - EventportalLambdaRole
      - Arn